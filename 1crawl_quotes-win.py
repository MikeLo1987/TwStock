# -*- coding: utf-8 -*-
"""下載每日上市櫃收盤行情

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zW3-H_CZfhJ7Qvx7WqpC8slIngY0iRNt
"""

import requests
from io import StringIO
import pandas as pd
import os

import datetime
import time
from datetime import date

quotes = {}
path1 = 'D:/GitHub/TwStock/'
path2 = 'D:/GitHub/TwStock/price/'

# 讀取檔案目錄
all_file_name = os.listdir(path1)

# 尋找檔案名稱包含"stock_names"的檔案
for filename in all_file_name:
  if "stock_names" in filename:
    stock_names = pd.read_csv(path1 + filename)
stock_names = stock_names.set_index('證券代號')

def get_twse_price(Date): # 下載每日上市收盤行情
  URL = ('https://www.twse.com.tw/rwd/zh/afterTrading/MI_INDEX?date='
     + str(Date).replace('-','') + '&type=ALLBUT0999&response=html')
  dfs = pd.read_html(URL)
  # 將 MultiIndex 轉換為 list，留下索引1的資料
  col = list(dfs[-1].columns)
  new_col = [item[1] for item in col]
  # 設定新的 columns
  dfs[-1].columns = new_col
  twse = dfs[-1].set_index('證券代號')
  
  # 將 開盤價、最高價、最低價、收盤價 和 本益比 欄位轉換為數值型別
  twse['開盤價'] = pd.to_numeric(twse['開盤價'], errors='coerce')
  twse['最高價'] = pd.to_numeric(twse['最高價'], errors='coerce')
  twse['最低價'] = pd.to_numeric(twse['最低價'], errors='coerce')
  twse['收盤價'] = pd.to_numeric(twse['收盤價'], errors='coerce')
  twse['本益比'] = pd.to_numeric(twse['本益比'], errors='coerce')
  #twse.to_csv(path1 + 'twse' + str(date1).replace('-','') + '.csv')
  
  return twse

def get_tpex_price(Date): # 下載每日上櫃收盤行情
  URL = ('https://www.tpex.org.tw/web/stock/aftertrading/daily_close_quotes/stk_quote_result.php?l=zh-tw&o=htm&d='
          + Date +'&s=0,asc,0')
  df = pd.read_html(URL)
  df = df[0]
  # 將 MultiIndex 轉換為 list，留下索引1的資料
  col = list(df.columns)
  new_col = [item[1] for item in col]
  df.columns = new_col
  
  df = df.rename(columns={'代號': '證券代號', '名稱': '證券名稱', '收盤': '收盤價', '開盤': '開盤價', '最高': '最高價',
                          '最低': '最低價', '成交金額(元)': '成交金額', '漲跌': '漲跌價差', '最後買價': '最後揭示買價', 
                          '最後買量(千股)': '最後揭示買量', '最後賣價': '最後揭示賣價', '最後賣量(千股)': '最後揭示賣量'})
  df = df.iloc[:-4]
  # 將 開盤價、最高價、最低價、收盤價 等欄位轉換為數值型別
  df['開盤價'] = pd.to_numeric(df['開盤價'], errors='coerce')
  df['最高價'] = pd.to_numeric(df['最高價'], errors='coerce')
  df['最低價'] = pd.to_numeric(df['最低價'], errors='coerce')
  df['收盤價'] = pd.to_numeric(df['收盤價'], errors='coerce')
  df['漲跌價差'] = pd.to_numeric(df['漲跌價差'], errors='coerce')
  df['成交股數'] = df['成交股數'].astype('int64')
  df['成交金額'] = df['成交金額'].astype('int64')
  df['成交筆數'] = df['成交筆數'].astype('int64')
  #df.to_csv(path1 + 'tpex1_' + str(Date).replace('-','') + '.csv')
  
  URL = ('https://www.tpex.org.tw/web/stock/aftertrading/peratio_analysis/pera_result.php?l=zh-tw&o=csv&d='
         + Date + '&c=&s=0,asc')
  headers = {
    'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:120.0) Gecko/20100101 Firefox/120.0'}
  req = requests.get(URL, headers=headers)
  lines = req.text.replace('\r', '').split('\n')
  
  df2 = pd.read_csv(StringIO("\n".join(lines[4:-1])), header=None)
  df2.columns = list(map(lambda l: l.replace(' ',''), lines[3].split(',')))
  df2 = df2.rename(columns={'股票代號': '證券代號','名稱': '證券名稱'})
  df2['證券代號'] = df2['證券代號'].astype('object')
  #df2.to_csv(path1 + 'tpex2_' + str(Date).replace('-','') + '.csv')
  
  tpex = pd.merge(df, df2, on=['證券名稱'])
  tpex = tpex.rename(columns={'證券代號_x': 'symbol'})
  tpex.index = tpex['symbol']
  tpex = tpex.drop(['symbol', '證券代號_y'], axis=1)
  #tpex.to_csv(path1 + 'tpex' + str(Date).replace('-','') + '.csv')

  return tpex

def combine(x, y):
  #將上市及上櫃資料合併
  result = pd.concat([x, y])
  # 將stock_names的index轉換為str型別，才能與result的index進行比對
  stock_names.index = stock_names.index.astype('str')
  result = result.reindex(stock_names.index)
  result = result.rename_axis('symbol')
  result.to_csv(path2 + str(date1).replace('-','') + '.csv')

  return result

i = input("請輸入要從哪一天開始抓資料，格式為YYYY-mm-dd:")
date1 = date.fromisoformat(i)

fail_count = 0
allow_continuous_fail_count = 10
while True:
  print(date1)
  try:
    if os.path.isfile(path2 + str(date1).replace('-','') + '.csv'):
      print('這天已有資料')
      fail_count += 1
    else:      
      date2 = str(date1.year - 1911) + date1.strftime('/%m/%d')
      # 抓資料
      twse = get_twse_price(date1)
      tpex = get_tpex_price(date2)
      quotes[date1] = combine(twse, tpex)
      print('抓取資料成功')
      fail_count = 0
  except:
    # 假日無資料
    print('今天沒有開市，無法下載資料')
    fail_count += 1
    if fail_count == allow_continuous_fail_count:
      print('超過10天沒有資料可以下載，程式自動中止')
      raise
      break

  #減一天
  date1 -= datetime.timedelta(days=1)
  time.sleep(10)
